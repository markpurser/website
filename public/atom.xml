<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mark Purser]]></title>
  <link href="http://markpurser.co.uk/atom.xml" rel="self"/>
  <link href="http://markpurser.co.uk/"/>
  <updated>2017-01-03T16:11:13+00:00</updated>
  <id>http://markpurser.co.uk/</id>
  <author>
    <name><![CDATA[Mark Purser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell Christmas Everybody]]></title>
    <link href="http://markpurser.co.uk/blog/2017/01/03/haskell-christmas/"/>
    <updated>2017-01-03T12:05:35+00:00</updated>
    <id>http://markpurser.co.uk/blog/2017/01/03/haskell-christmas</id>
    <content type="html"><![CDATA[<p>Here is my solution to one of the exercises set by our Haskell reading group: Draw a Christmas tree to the console, given the height of the tree as input. It demonstrates some of the Input and Output of Chapter 9 of <a href="http://learnyouahaskell.com">Learn You A Haskell For Great Good</a>. Thanks to <a href="https://www.meetup.com/Functional-Brighton">Functional Brighton</a> for all the great meet-ups this year</p>

<!-- more -->


<p>In terms of tree decoration we are going for a minimalist approach:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>runhaskell xmas 4
</span><span class='line'>
</span><span class='line'>    *
</span><span class='line'>   ***
</span><span class='line'>  *****
</span><span class='line'> *******
</span><span class='line'>    |</span></code></pre></td></tr></table></div></figure>


<p>To model the tree, we draw from two sets of integers. The first being the number of spaces preceding each row - simply starting at height-1 and decrementing to 0 (the last row of the tree, discounting the trunk)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">nspaces</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">nspaces</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">reverse</span> <span class="o">$</span> <span class="n">take</span> <span class="n">a</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second set of integers represent the stars that make up the actual tree. The set consists of the odd numbers starting from 1. These are generated using a list comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">nstars</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">nstars</span> <span class="n">a</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">a</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">],</span> <span class="n">odd</span> <span class="n">x</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we simply zip these two sets together into a list of tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">let</span> <span class="n">treemodel</span> <span class="ow">=</span> <span class="n">zip</span> <span class="p">(</span><span class="n">nspaces</span> <span class="n">height</span><span class="p">)</span> <span class="p">(</span><span class="n">nstars</span> <span class="n">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run them through a stringifyer, converting each tuple to a number of space characters followed by a number of stars characters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">stringifytreerow</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Char</span><span class="p">]</span>
</span><span class='line'><span class="nf">stringifytreerow</span> <span class="p">(</span><span class="n">nspaces</span><span class="p">,</span> <span class="n">nstars</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">take</span> <span class="n">nspaces</span> <span class="o">$</span> <span class="n">repeat</span> <span class="n">&#39;</span> <span class="n">&#39;</span><span class="p">)</span> <span class="o">++</span> <span class="p">(</span><span class="n">take</span> <span class="n">nstars</span> <span class="o">$</span> <span class="n">repeat</span> <span class="n">&#39;</span><span class="o">*</span><span class="n">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now to the whole point of the IO chapter! To display something&hellip; it&rsquo;s simple using mapM_ which maps putStrLn over all tree strings, and sequences the resulting IO actions. We also display the tree trunk at the same time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">mapM_</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">treestrings</span>
</span><span class='line'><span class="nf">putStrLn</span> <span class="n">trunkstring</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Limitations</h2>

<p>The program does not check for invalid input, such as height 0</p>

<h2>Full listing</h2>

<div><script src='https://gist.github.com/18ef346fcbd509e4b3ed4342048a9bb6.js?file=xmas.hs'></script>
<noscript><pre><code>import System.Environment
import Data.List


-- compute spaces running alongside the left of the tree
nspaces :: Int -&gt; [Int]
nspaces a = reverse $ take a [0..]

-- compute stars making up the tree
nstars :: Int -&gt; [Int]
nstars a = take a [x | x &lt;- [1..], odd x]

-- convert tuple containing number of spaces and number of stars to a string
stringifytreerow :: (Int, Int) -&gt; [Char]
stringifytreerow (nspaces, nstars) = (take nspaces $ repeat ' ') ++ (take nstars $ repeat '*')


main = do
    -- get single integer argument representing the height of the Christmas tree
    (heightstring:args) &lt;- getArgs
    let height = read heightstring :: Int

    -- use the height to generate a model of the tree consisting of tuples of number of
    -- spaces and number of stars for each row
    let treemodel = zip (nspaces height) (nstars height)
    let treestrings = map stringifytreerow treemodel

    -- align the trunk of the tree with the top (head) of the tree
    let trunkstring = (take (head $ nspaces height) $ repeat ' ') ++ &quot;|&quot;

    -- display the tree
    mapM_ putStrLn $ treestrings
    putStrLn trunkstring
</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
